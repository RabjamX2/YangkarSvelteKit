# .github/workflows/deploy.yml

name: Deploy Yangkar Website

on:
    push:
        branches:
            - main # Trigger this workflow on every push to the main branch

jobs:
    deploy-backend:
        name: Deploy Backend API
        runs-on: ubuntu-latest
        environment: production # Uses secrets from your 'production' environment

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: "10.13.1" # Version from your package.json

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20" # A stable, modern Node.js version
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile

            - name: Deploy to Backend Server
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.BACKEND_SSH_HOST }}
                  username: ${{ secrets.BACKEND_SSH_USERNAME }}
                  password: ${{ secrets.BACKEND_SSH_PASSWORD }}
                  script: |
                      export NVM_DIR="$HOME/.nvm"
                      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

                      cd /home/yangkarbhoeche-api/htdocs/api.yangkarbhoeche.com/YangkarSvelteKit

                      # Preserve .env and other ignored files, but force-discard tracked changes
                      git fetch origin main
                      git checkout -- .

                      # Pull the latest code
                      git pull origin main

                      # Then install dependencies
                      pnpm install --no-frozen-lockfile

                      # Ensure all backend dependencies are installed properly
                      cd apps/backend
                      npm install -D prisma
                      cd ../..

                      # Run migrations with the latest schema
                      pnpm --filter backend exec prisma migrate deploy

                      # Now generate Prisma client with the updated schema for production
                      # Using the new --no-engine flag as recommended for production
                      pnpm --filter backend exec prisma generate --no-engine

                      # Set NODE_ENV for the PM2 process
                      export NODE_ENV=production

                      # Restart backend with updated environment
                      pm2 restart backend --update-env

    deploy-frontend:
        name: Deploy Frontend App
        runs-on: ubuntu-latest
        environment: production # Uses secrets from your 'production' environment
        needs: deploy-backend # This job will wait for the backend deployment to succeed

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: "10.13.1" # Version from your package.json

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "pnpm"

            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile

            - name: Deploy and build on the server directly
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.FRONTEND_SSH_HOST }}
                  username: ${{ secrets.FRONTEND_SSH_USERNAME }}
                  password: ${{ secrets.FRONTEND_SSH_PASSWORD }}
                  script: |
                      export NVM_DIR="$HOME/.nvm"
                      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

                      cd /home/yangkarbhoeche/htdocs/yangkarbhoeche.com/YangkarSvelteKit

                      # Preserve .env and other ignored files, but force-discard tracked changes
                      git fetch origin main
                      git checkout -- .

                      # Pull the latest code
                      git pull origin main

                      # Install all dependencies including dev dependencies
                      pnpm install --no-frozen-lockfile

                      # Build the frontend app directly on the server
                      NODE_ENV=production pnpm --filter frontend build

                      # Set NODE_ENV for the PM2 process
                      export NODE_ENV=production

                      # Restart the service with updated environment
                      pm2 restart frontend --update-env
